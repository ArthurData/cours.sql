---
title: Introduction au SQL avec R
format:
  lille-univ-revealjs:
    css: custom.css
author: Arthur Br√©ant
date: last-modified
---

# Que va-t-on faire ?

## Les objectifs

Les objectifs de ce cours sont de vous permettre de :

> - Apprendre le SQL
> - Utiliser SQL dans l'environnement R
> - Exploiter des BDD relationnelles
> -  Vous familiarisez avec R
> - Et plus si affinit√©s üòâ 

# Faisons les pr√©sentations !

## {.center-section}

:::: {layout="[ 33, 33, 35 ]"}

::: {#first-column}
Mars 2016 √† D√©c. 2017

![](www/images/frizbiz.png){fig-align="center"}
:::

::: {#second-column}
Janv. 2018 √† Sept. 2021

![](www/images/critizr.png){fig-align="center"}
:::

::: {#third-column}
Octobre 2021 √† aujourd'hui

![](www/images/thinkr.png){fig-align="center"}
:::

::::

## √Ä vous 

> - Qui √™tes-vous ? 
> - Avez-vous d√©j√† pratiqu√© le SQL ?
> - Vers quel m√©tier souhaitez-vous vous orienter ? 
> - Quelles sont vos attentes de ce cours ?

##

![](www/images/questions.png){fig-align="center"}

# Le SQL, c'est quoi ?

## Structured Query Language

Le SQL est un langage informatique servant √† exploiter des **bases de donn√©es relationnelles**.

Le SQL permet notamment de **rechercher, d'ajouter, de modifier ou de supprimer** des donn√©es.

Cr√©√© en 1974, le SQL est un langage de **requ√™tes** pour les bases de donn√©es.

## La composition du SQL 

Il existe plusieurs formes d'instructions du langage SQL : 

- Contr√¥le de donn√©es : _Permettent de g√©rer les autorisations d'acc√®s aux donn√©es._
  
- Contr√¥le des transactions : _Permettent de confirmer ou annuler une transaction._

- **D√©finition des donn√©es** : _Permettent de d√©crire et de modifier la structure et les caract√©ristiques de base._

- **Manipulation des donn√©es** : _Permettent de manipuler, ajouter ou supprimer des donn√©es._

**Utiliser le SQL permet de manipuler, d'extraire et de regrouper les donn√©es dans une base afin de les rendre exploitables dans R.**

## Concr√®tement, comment cela s'articule ?

## 

![](www/images/SQLtoR.png){fig-align="center"}

## Une base de donn√©es ? 

Une base de donn√©es est un **ensemble de donn√©es stock√©es** qui permet de **sauvegarder** des informations ou une activit√©. Ces informations sont stock√©es dans plusieurs **tables** (ou tableaux).

C'est l'√©l√©ment central d'un **syst√®me d'information**. La base de donn√©es contient les **informations clients** d'une entreprise.

Le fichier client est la **valeur d'une entreprise**, c'est un _actif immat√©riel_. 

Les donn√©es sauvegard√©es dans les tables sont **consultables** et **exploitables**.

## Mais c'est quoi une table ?

Une table est tableau qui contient des donn√©es. Dans une table, une colonne contient une **information** (_des noms, des pr√©noms, des dates, etc._). Les lignes elles, contiennent des **enregistrements** (_individu 1, individu2, etc._).

Une table regroupe des informations sur un **domaine bien pr√©cis** ! 

Tout ce qui concerne les clients est enregistr√© dans une table <font color="#c7254e">`client`</font>, des coordonn√©es dans une table <font color="#c7254e">`adresse`</font>.

## Primary Key (cl√© primaire)

Chaque table contient un *identifiant*. Contenu dans une colonne, cet identifiant est **unique** ! Un identifiant peut s'auto-incr√©menter ou bien √™tre un √©l√©ment unique (_email, num√©ro de s√©curit√© sociale_)

Cet identifiant permet d'avoir une table bien index√©e, ce qui facilite notamment les recherches. Mais surtout, cette _cl√© primaire_ permet de **relier les tables entre elles** !

## Foreign Key (cl√© √©trang√®re)

On parle d'une base de donn√©es relationnelle quand il existe des **relations** entre les tables. 

Par exemple, nous pouvons trouver des informations relatives √† une ligne de la table <font color="#c7254e">`client`</font> dans celle de la table <font color="#c7254e">`adresse`</font>. En somme, trouver l'adresse d'un client. 

Ce lien existe gr√¢ce √† la relation entre la **cl√© primaire** et la **cl√© √©trang√®re**. 

La cl√© √©trang√®re est une colonne d'une table (_adresse_) qui fait **r√©f√©rence** √† la colonne, cl√© primaire, d'une autre table (_client_). 

## 

![](www/images/table.png){fig-align="center"}

## 

![](www/images/tables.png){fig-align="center"}

## Syst√®me de Gestion de Base de Donn√©es

Une table stocke des donn√©es. 

Mais qui stocke donc les tables ? 

C'est le r√¥le du **Syst√®me de Gestion de Base de Donn√©es** (SGBD). 

Le SGBD permet : 

> - le stockage, 
> - la mise √† jour,
> - la partageabilit√© des donn√©es,
> - la maintenance des donn√©es.

Le choix du SGBD d√©pend principalement de ses objectifs. 

Les plus r√©pandus sont : MySQL, PostgreSQL, MongoDB, SQLite, _etc._

## Avant de commencer !

En SQL, l'ordre des instructions est important !
```{sql, eval=FALSE}
SELECT [ DISTINCT ] 
FROM
WHERE
GROUP BY
HAVING
ORDER BY
LIMIT
```

‚ö†Ô∏è Deux r√©gles d'√©criture √† respecter *au maximum* : 

- √âcrire les instructions SQL en majuscule.   
   
- Indenter son code.

# R + SQL !

## Interroger des SGBD

Il existe plusieurs _packages_ pour requ√™ter des SGBD depuis R. 

Parmi eux, nous retrouvons : 

> - {RMySQL} pour se connecter sur **MySQL** et **MariaDB**.  
\ 
> - {RPostgreSQL} pour se connecter sur **Postgres** et **Redshift**.  
\ 
> - {RSQLite} pour interroger les bases **SQLite**.   
\ 
> - Mais aussi les packages comme {odbc} ou encore {bigrquery}.  

## Le package {RSQLite}

Dans R, le package {RSQLite} permet d'**interroger** des bases de donn√©es SQLite. 

C'est le package parfait pour nous exercer aux instructions SQL depuis notre logiciel pr√©f√©r√© ! üí™

```{r, eval=FALSE}
install.packages("RSQLite")
library(RSQLite)
```

##  Importation des donn√©es

Pour apprendre, nous utiliserons le jeu de donn√©es [players.csv](https://github.com/ArthurData/data/blob/main/players.csv)

Vous pouvez t√©l√©charger les donn√©es avec la commande suivante : 

```{r}
#| echo: true
#| eval: true
# install.packages("readr")
players <- readr::read_csv(
  "https://raw.githubusercontent.com/ArthurData/data/main/players.csv",
  na = ""
)
```

##  players

Le dataframe <font color="#c7254e">`players`</font> contient la liste des joueurs de football ayant particip√© √† la coupe du monde en 2014. Il est parfait pour nous entrainer au SQL. 

Vous pouvez le consulter avec la commande :

```{r}
#| echo: true
#| eval: false
# Ceci est un commentaire
# La fonction View() commence avec un V majuscule !
View(players)
```

## players

```{r}
#| echo: false
#| eval: true
players
```

## Let's go !

La suite : [S√©lectionner des donn√©es](https://sql.breant.art/select)
