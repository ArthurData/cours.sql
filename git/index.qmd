---
title: Introduction à Git
format:
  lille-univ-revealjs: default
author: Arthur Bréant
---

# Versionner son code

# Connaissez-vous Git ?

## Que se passe-t-il si ...

_(par exemple...)_

::: {.fragment .fade-up}
- Vous perdez votre ordinateur ?
:::

::: {.fragment .fade-up}
- Votre ordinateur prend feu ?
:::

::: {.fragment .fade-up}
- Vous souhaitez travailler à plusieurs sur le même projet ?
:::

::: {.fragment .fade-up}
&#x1F62D; C'est la catastrophe
:::

# Git, c'est quoi ?

## Git

Git est un **logiciel** à installer sur votre ordinateur.

Git est disponible pour **toutes les plateformes** :

Télécharger git pour Mac OSX: [[ici](https://git-scm.com/download/mac)]

Télécharger git pour Windows: [[ici](https://gitforwindows.org/)]

Télécharger git pour Linux: [[et là...](https://git-scm.com/book/fr/v2/D%C3%A9marrage-rapide-Installation-de-Git)]

## Git

Git est un **système de contrôle de version.**

Son objectif est d'aider les développeurs à **travailler en collaboration** sur des projets et de gèrer **l'évolution des fichiers**.

::: {.fragment .fade-up}
&#x1F192; Très très utilisé au sein des entreprises !
:::

::: {.fragment .fade-up}
&#x27BF; Par ex: [https://github.com/ArthurData/cours.sql](https://github.com/ArthurData/cours.sql)
:::

## Git

Git est un outil en ligne de commande. 

&#x27A1; On exécute les commandes dans un **terminal**.

Rstudio a l'avantage de proposer une interface graphique afin d'utiliser git.

# Suivre une histoire

## Repository

Utiliser git dans votre projet (_analyses, rapports, mémoires, etc..._) permet de **suivre son évolution**. 

Git permet de créer une histoire autour d'un projet et de consulter cet historique.

\ 

::: {.fragment .fade-up}
&#x27A1; Dans git, un projet versionné (_tracké_) est appelé **<font color="#BF4A3C">`repository`</font>.**
:::

\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**
:::

## Commits

Toutes les modifications apportées à un _repository_ pourront faire l'objet d'un `snapshot`.

L'histoire de votre projet pourra contenir plusieurs snapshots au cours de son existence.

\ 

::: {.fragment .fade-up}
&#x27A1; Lorsque vous photographiez des modifications dans votre projet, vous réalisez un **<font color="#BF4A3C">`commit`</font>.**
:::

\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**
:::

## 

![](../www/images/avec_sans_git.png){fig-align="center"}

 _<font color="#C2BCBC">source: ThinkR</font>_


## Commits

Un commit peut contenir des modifications sur **un ou plusieurs fichiers**. 

En parallèle, git sauvegarde plusieurs autres informations : 

- l'auteur des modifications, 
- la date des modifications, 
- la raison des modifications.

## Commits

![](../www/images/commit_message.png){fig-align="center"}

## Commits

Tous vos commits possèdent un **identifiant** qui les rendent unique. On appel cet idenfiant le **<font color="#BF4A3C">`hash`</font>.**

Celà rend notre navigation dans l'histoire de notre projet possible.  
  
Git peut vous servir de **machine à voyager dans le temps**.

Pour celà, on utilise le **<font color="#BF4A3C">`hash`</font>** associé à un **<font color="#BF4A3C">`commit`</font>**, et on réalise un **<font color="#BF4A3C">`checkout`</font>**.


# Développer dans son projet 

## Branches

Pendant la vie de votre projet, vous allez essayer, tester et expérimenter. 

Il est aussi possible que vous vous trompiez. 

Les **<font color="#BF4A3C">`branches`</font>** sont comme des copues temporaires de votre projet, dans lequelles on pourra travailler en parralèle. Ensuite, on fusionera le travail.


::: {.fragment .fade-up}
&#x27A1; Git va vous aider à vous organiser, avec des **<font color="#BF4A3C">`branches`</font>**.
:::

\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**  

&#x1F331; **<font color="#BF4A3C">`branches`</font>**
:::

## 

![](../www/images/git_clean.png){fig-align="center"}

## Branche _main_

Dans votre projet, il existe une branche spéciale, nommée **<font color="#BF4A3C">`main`</font>**. 

Cette branche **contient** et **doit contenir** du code "propre". 

Les dévellopeurs ne modifient jamais les fichiers directement dans cette branche. 

Ils développent dans des branches parallèles : `feature-branche`

## Branche _main_

Parfois, cette branche est aussi appelée _master_.
 
![](../www/images/gitlab_flow_github_flow.png){fig-align="center"}

## _feature-branche_

Dans vos branches de développement, vous pouvez librement tester, essayer et explorer.

Travailler dans ces branches ne vient pas impacter notre branche principale.

Une fois notre travail sur une _feature-branche_ terminé, on peut alors décider de **rapatrier les changements** dans la branche principale. On parle alors de **<font color="#BF4A3C">`merge`</font>**.

\ 

Il est aussi possible que le travail sur une _feature-branche_ ne soit jamais concluant et ne soit donc jamais _mergé_ dans main.

::: {.fragment .fade-up}
&#x27A1; Faire un **<font color="#BF4A3C">`merge`</font>**, c'est rapatrier les modifications d'une branche dans une autre ( _main_)
:::


\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**  

&#x1F331; **<font color="#BF4A3C">`branches`</font>**  

&#x1F501; **<font color="#BF4A3C">`merge`</font>**  
:::

## Merge

Lors d'un **<font color="#BF4A3C">`merge`</font>**, on dépose toutes les nouveautés de notre branche de développement dans la branche principale. 

Quand deux développeurs réalisent un merge, il est possible que les modifications apportées dans main rentrent en conflit. On parle alors de **<font color="#BF4A3C">`conflict`</font>**.


::: {.fragment .fade-up}
&#x27A1; C'est le cas si ces deux développeurs ont réalisé des **modifications concurrentes** sur un même fichier. 
:::

\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**  

&#x1F331; **<font color="#BF4A3C">`branches`</font>**  

&#x1F501; **<font color="#BF4A3C">`merge`</font>**   

&#x1F4A5; **<font color="#BF4A3C">`conflict`</font>**  
:::

# Sauvegarder son travail

## Remote

Jusqu'à présent, nous venons de voir comment : 

- historiser son travail,
- collaborer dans son projet,
- voyager dans le temps.

Git permet aussi de réaliser une sauvegarde de votre projet. 


::: {.fragment .fade-up}
&#x27A1; La sauvegarde de votre projet se fait sur un serveur à distance, nommée **<font color="#BF4A3C">`remote`</font>**.
:::

\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**  

&#x1F331; **<font color="#BF4A3C">`branches`</font>**  

&#x1F501; **<font color="#BF4A3C">`merge`</font>**   

&#x1F4A5; **<font color="#BF4A3C">`conflict`</font>**  

&#x1F6F0; **<font color="#BF4A3C">`remote`</font>**  
:::

## Github / Gitlab 

**Github** et **Gitlab** sont des services qui proposent une solution à git pour stocker votre **<font color="#BF4A3C">`remote`</font>**.

Votre projet sera alors sauvegardé sur un serveur à distance : consultable depuis n'importe où, disponible et sécurisé.

\

&#x1F44D; Pus de risque de perdre son travail !

## Push 

L'objectif est donc maintenant d'envoyer ses commits sur le remote.

Pour cela, on réalise un **<font color="#BF4A3C">`push`</font>**.

::: {.fragment .fade-up}
&#x27A1; Le **<font color="#BF4A3C">`push`</font>** est l'action d'envoyer toutes ses modifications (**<font color="#BF4A3C">`commits`</font>**) sur le **<font color="#BF4A3C">`remote`</font>**.
:::

\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**  

&#x1F331; **<font color="#BF4A3C">`branches`</font>**  

&#x1F501; **<font color="#BF4A3C">`merge`</font>**   

&#x1F4A5; **<font color="#BF4A3C">`conflict`</font>**  

&#x1F6F0; **<font color="#BF4A3C">`remote`</font>**  

&#x1F4E4; **<font color="#BF4A3C">`push`</font>**  
:::


## Pull

Votre **<font color="#BF4A3C">`remote`</font>** est donc à jour de vos dernières modifications.

Votre collègue souhaite maintenant bénéficier de vos dernières modications apportées à votre projet :

Pour récupérer les derniers commits, on réalisera un **<font color="#BF4A3C">`pull`</font>**.

\ 

::: {.fragment .fade-up}
&#x27A1; Le **<font color="#BF4A3C">`pull`</font>** permet de **récupérer** depuis le **<font color="#BF4A3C">`remote`</font>**, **les dernières modifications** apportées sur un projet, en local, **sur son ordinateur**.
:::

\

\ 

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**  

&#x1F331; **<font color="#BF4A3C">`branches`</font>**  

&#x1F501; **<font color="#BF4A3C">`merge`</font>**   

&#x1F4A5; **<font color="#BF4A3C">`conflict`</font>**  

&#x1F6F0; **<font color="#BF4A3C">`remote`</font>**  

&#x1F4E4; **<font color="#BF4A3C">`push`</font>**  

&#x1F4E5; **<font color="#BF4A3C">`pull`</font>**  
:::


## Clone

Pour récupérer un projet depuis un remote, pour la première fois, on effectue un **<font color="#BF4A3C">`clone`</font>**.

Réaliser un **<font color="#BF4A3C">`clone`</font>** permet de **récupérer sur votre ordinateur une copie du projet**.

Une fois la copie récupérée, vous pouvez ensuite procéder à vos modifications dans le projet : **<font color="#BF4A3C">`commits`</font>** puis **<font color="#BF4A3C">`push`</font>**.

::: {.fragment .fade-up}
&#x27A1; Le **<font color="#BF4A3C">`clone`</font>** est l'action de récupérer pour la première fois la copie du projet sur son ordinateur local.
:::

\

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>**  

&#x1F331; **<font color="#BF4A3C">`branches`</font>**  

&#x1F501; **<font color="#BF4A3C">`merge`</font>**   

&#x1F4A5; **<font color="#BF4A3C">`conflict`</font>**  

&#x1F6F0; **<font color="#BF4A3C">`remote`</font>**  

&#x1F4E4; **<font color="#BF4A3C">`push`</font>**  

&#x1F4E5; **<font color="#BF4A3C">`pull`</font>**  

&#x1F195; **<font color="#BF4A3C">`clone`</font>**  
:::

## Récap

::: {.fragment .fade-up}
&#x1F5C2; **<font color="#BF4A3C">`repository`</font>**  : le dossier que vous voulez surveiller

&#x1F4F8; **<font color="#BF4A3C">`commit`</font>** : un instant figé dans la vie de votre projet

&#x1F331; **<font color="#BF4A3C">`branches`</font>** : un chemin paralelle du projet

&#x1F501; **<font color="#BF4A3C">`merge`</font>** : la fusion de une ou plusieurs branches

&#x1F4A5; **<font color="#BF4A3C">`conflict`</font>** : des modifications sont concurrentes

&#x1F6F0; **<font color="#BF4A3C">`remote`</font>** : un serveur distant ayant une copie de repository

&#x1F4E4; **<font color="#BF4A3C">`push`</font>** : envoyer ses nouveaux commit vers le remote

&#x1F4E5; **<font color="#BF4A3C">`pull`</font>** : recuperer les nouveaux commit en local depuis le remote

&#x1F195; **<font color="#BF4A3C">`clone`</font>**  : récuperer pour la premiere fois le repository depuis le remote
:::

## Récap 

Git permet de : 

- Créer une histoire avec son projet.

- Voyager dans le temps.

- Faire des essais, des erreurs, essayer.

- Sauvegarder son travail.

- Collaborer.


# Configurer git

## Installation et et préparation

Préparation de Windows

- Télécharger git pour Windows depuis https://git-scm.com/downloads.  

- Installer git pour Windows dans le chemin par défaut.  

- Choisir "Use git from the Windows Command Prompt"  

- Choisir "Checkout as is, commit as-is".

\ 

Préparation de RStudio

- Menu Tools > Global Option > git/SVNs.  

- Vérifier que git est activé et que le chemin vers l'executable git est le bon. 

(sous windows : `C:/Program Files/Git/bin/git.exe`)

## Configuration de git 

Une fois git configuré, nous allons pouvoir l'utiliser dans R. 

Des packages R peuvent nous aider, comme le package **<font color="#BF4A3C">`{usethis}`</font>**.

Pour jouer avec git, nous avons besoin de lui indiquer qui nous sommes : 


```{r}
#| echo: true
#| eval: false
# install.packages("usethis")

usethis::use_git_config(
  scope = "user",
  user.name = "<nom prenom>",
  user.email = "<votre@email.fr>"
)
```

## Configuration de git 

- Créer un token à partir de votre compte gitlab

User > Preferences > Access Tokens > Add a personal access token  

Ajouter un nom, une date d'expiration et cocher tous les "scopes"

- Copiez votre token commençant par glpat

Stockez-le
```{r}
#| echo: true
#| eval: false
gitcreds::gitcreds_set(url = "https://gitlab.com")
```


## Configuration de git 

Par défaut, vous pouvez demander à git d'utiliser la branche **<font color="#BF4A3C">`main`</font>** plutôt que **<font color="#BF4A3C">`master`</font>**.

```{r}
#| echo: true
#| eval: false
usethis::use_git_config(
  scope = "user",
  init.defaultBranch = "main"
)
```

## Configuration de git

Nous venons de configurer git avec 2 fonctions R. 

Nous pouvons enfin vérifier nos configurations avec l'instruction : 



```{bash, eval=TRUE, echo=TRUE}
git config --global --list
```

&#x26A0; il s'agit d'une instruction git. Elle est à exécuter dans votre terminal.

# Création d'un projet git

## Projet avec Gitlab

&#x27A1;  Idéalement, **tous vos projets sont associés à un projet git.**

Pour cette séance, nous allons utiliser Gitlab. 

Création d'un projet sur Gitlab :

> - Si besoin, se créer un compte sur : [https://gitlab.com/](https://gitlab.com/)
\
> - Utiliser le bouton New Project pour créer un projet 
\
> - Choisir un nom de projet (`monprojet` pour le cours) 
\
> - ne pas cocher la case "Initialiser avec un README"

## Projet avec Gitlab

Récupérez ensuite le lien **<font color="#BF4A3C">`https`</font>** qui pointe vers votre projet Gitlab.

Ce lien va nous permettre de réaliser un **<font color="#BF4A3C">`clone`</font>** de ce projet.

![](../www/images/monprojet.png){fig-align="center"} 

## Projet avec Gitlab

L'étape suivante consiste à créer la copie du projet Gitlab dans votre ordinateur. 

Pour celà, dans Rstudio :

> - Menu File > New Project
> - Choisir : Version Control > git
> - Repository URL : https://gitlab.com/~~**votre_nom**~~/monprojet.git
> - Project Directory Name : doit correspondre au nom de votre projet (`monprojet`)
> - Create project as subdirectory : Choisir l'emplacement du projet sur votre ordinateur

## Projet avec Gitlab

Votre session Rstudio va alors redémarrer à l'intérieur de votre projet. Vous devriez voir apparaître l'onglet git:

![](../www/images/init_git.png){fig-align="center"}

## Projet avec Gitlab

Vérifier la configuration

Depuis un Terminal, vérifiez la localisation du remote :

```{bash eval=FALSE, echo=TRUE}
git remote --verbose
```

On peut ajouter un projet distant avec :

```{bash eval=FALSE, echo=TRUE}
git remote add remote-name URL
```

Ou le supprimer avec :

```{bash eval=FALSE, echo=TRUE}
git remote rm remote-name
```

# Git

## Utiliser git

Pour travailler dans votre projet, vous utiliserez les commandes suivantes : 

![](../www/images/git-commands-simplify.png){fig-align="center"}

## Utiliser git

::: {.fragment .fade-up}
**<font color="#BF4A3C">`git add`</font>**

Choisissez les fichiers modifiés à ajouter dans votre prochaine version. Cocher la case correspondante sur le panneau "Git".
:::

::: {.fragment .fade-up}
**<font color="#BF4A3C">`git commit`</font>**

Une fois les fichiers ajoutés, utiliser le panneau "Git" et le bouton commits pour figer un état. Un message de commit pourra être associé au commit.
:::

::: {.fragment .fade-up}
**<font color="#BF4A3C">`git push`</font>**

Une fois qu'un certain nombre de commit ont été effectués, afin de les envoyer sur le remote, il faut effectuer un push. Pour celà, utiliser la fenêtre "Git" et le bouton push (représenté sous la forme d'une flèche montante).
:::

::: {.fragment .fade-up}
**<font color="#BF4A3C">`git pull`</font>**

Pour rapatrier des modifications depuis le remote, il faut faire un pull en utilisant la fenêtre "Git" et le bouton pull (représenté sous la forme d'une flèche descendante). Votre projet Rstudio est alors modifié.
:::

## Utiliser git

L'onglet git vous donner l'état de vos fichiers dans votre projet :

![](../www/images/etat_fichier_git.png){fig-align="center"}

## Premier commit

Nous allons créer un premier fichier dans notre projet. 

les étapes :  

> - File > New file > Markdown file
\
> - Enregistrez ce fichier
\
> - Ajoutez du texte à la première ligne de votre fichier
\
> - Cochez la case asssociée à votre fichier dans l'onglet git
\
> - Cliquez sur le bouton **<font color="#BF4A3C">`commit`</font>**

## Premier commit

Nous allons procéder à notre premier **<font color="#BF4A3C">`commit`</font>**

Pour créer un **<font color="#BF4A3C">`commit`</font>**, nous devons également écrire un **message de commit**

Ce message est très important car il raconte l'histoire de vos modifications. C'est ce message qui vous permettra de retrouver vos modifications plus tard.

> - Ecrivez le message de **<font color="#BF4A3C">`commit`</font>**
\
> - Cliquez sur le bouton **<font color="#BF4A3C">`commit`</font>**

## Second commit

Nous allons continuer nos modifications sur notre fichier :

> - Ajoutez une seconde ligne à votre fichier
\
> - Cochez la case asssociée à votre fichier dans l'onglet git
\
> - Cliquez sur le bouton **<font color="#BF4A3C">`commit`</font>**
\
> - Ecrivez le message de **<font color="#BF4A3C">`commit`</font>**
\
> - Cliquez sur le bouton **<font color="#BF4A3C">`commit`</font>**

## Premier push

Vos modifications sont maintenant dans des **<font color="#BF4A3C">`commits`</font>**.

Votre **<font color="#BF4A3C">`remote`</font>** ne connaît pas encore vos dernières modifications. 

Nous devons envoyer, par un **<font color="#BF4A3C">`push`</font>**, nos modifications sur le serveur.

Pour cela, il faut cliquer sur la flèche verte du panneau git.

![](../www/images/push_a.png){fig-align="center"}

## Premier push

Rendez-vous sur Gitlab. Actualisez la page. Vous devez voir votre projet avec vos modifications.

![](../www/images/mon_second_push.png){fig-align="center"}

## Premier pull

Nous allons simuler le travail d'un autre développeur sur notre projet. 

Pour cela, nous allons modifier le fichier directement depuis l'interface de Gitlab.

> - Rendez-vous dans votre fichier
\
> - Cliquez sur le bouton `Edit in Web IDE`
\
> - Ajoutez du texte à 3ème ligne
\
> - Cliquez sur commit depuis _main_ 

## Premier pull

Notre fichier local sur Rstudio ne contient pas encore la modification apportée sur le **<font color="#BF4A3C">`remote`</font>**. 

Nous avons besoin de **tirer ses modiciations en local**.

Pour réaliser un **<font color="#BF4A3C">`pull`</font>**, il faut cliquer sur la flèche bleue.

Notre fichier contient maintenant la modification.

## Explorer l'historique

Il est possible d'explorer l'historique de notre projet : 

- Depuis l'interface de Rstudio,

- Depuis l'interface de Gitlab.

_Petit tour du propriétaire_

## Message de commit

**Votre message de commit doit être le plus clair possible**

Quelques règles à respecter : 

> - Il ne doit pas dépaser 50 caractères
\ 
> - Il doit être écrit à l'impératif,
\ 
> - Il commence par une majuscule et termine par un point 

