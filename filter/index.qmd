---
title: Filtrer des donn√©es
format:
  lille-univ-revealjs: default
author: Arthur Br√©ant
---

# Filtrer des donn√©es

## S√©lection conditionnelle

En SQL, il est possible de s√©lectionner certaines lignes dans notre table selon des conditions. L'instruction <font color="#188630">`WHERE`</font> permet de **filtrer** nos donn√©es selon les conditions que l'on renseigne.

```{sql, eval=FALSE, echo=TRUE}
SELECT colonne 
FROM tableau 
WHERE colonne op√©rateur condition
```

On teste une condition √† l'aide des op√©rateurs de comparaisons. 
```{r}
#| echo: true
#| eval: false
=  # √âgal
<> # Diff√©rent de
!= # Diff√©rent de
>  # Strictement sup√©rieur
<  # Strictement inf√©rieur
>= # Sup√©rieur ou √©gal
<= # Inf√©rieur ou √©gal
```

\  

::: {.fragment}
```{sql, eval=FALSE, echo=TRUE}
SELECT *
FROM tableau 
WHERE taille > 178
```
:::

## S√©lection conditionnelle

Afficher le nom des joueurs qui jouent en position de milieu de terrain :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

Afficher le nom et le nombre de s√©lections des joueurs qui ont 30 s√©lections ou plus : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

Afficher le nom des joueurs qui portent le num√©ro 10 : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

## S√©lection conditionnelle

::: {.fragment .fade-in-then-semi-out}
Affichons le nom des joueurs qui jouent en position de milieu de terrain :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT name 
  FROM players 
  WHERE position = 'Milieu'"
)
```
:::

::: {.fragment .fade-in-then-semi-out}
Affichons le nom et le nombre de s√©lections des joueurs qui poss√©dent 30 s√©lections ou plus : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT name, played 
  FROM players 
  WHERE played >= 30"
)
```
:::

::: {.fragment .fade-in-then-semi-out}
Affichons le nom de joueurs qui portent le num√©ro 10 : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT name 
  FROM players 
  WHERE number = 10"
)
```
:::

## S√©lection conditionnelle

Il est possible de combiner plusieurs conditions √† l'aide des op√©rateurs <font color="#188630">`AND`</font> et/ou <font color="#188630">`OR`</font>.

```{sql, eval=FALSE, echo=TRUE}
SELECT colonne_1, colonne_2
FROM tableau 
WHERE colonne_1 op√©rateur condition 
  AND colonne_2 op√©rateur condition 
```

## S√©lection conditionnelle

S√©lectionner les milieux de terrain avec plus de 30 s√©lections: 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

S√©lectionner les capitaines qui portent le num√©ro 10 :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

Extraire les capitaines ou ceux avec plus de + 100 s√©lections :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

## S√©lection conditionnelle

::: {.fragment .fade-in-then-semi-out}
S√©lectionnons les milieux de terrain avec plus de 30 s√©lections :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE position = 'Milieu' AND played > 30"
)
```
::: 

::: {.fragment .fade-in-then-semi-out}
S√©lectionnons les capitaines qui portent le num√©ro 10 :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players
  WHERE captain = 1 AND number = 10"
)
```
:::

::: {.fragment .fade-in-then-semi-out}
Extrayons les capitaines ou ceux avec + de 100 s√©lections :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT name, captain, played 
  FROM players 
  WHERE captain = 1 OR played > 100"
)
```
:::

## S√©lection conditionnelle 

Le langage SQL propose d'autres op√©rateurs pour r√©aliser des conditions. 

Parmi eux, les plus utilis√©s :

- <font color="#188630">`(NOT) IN`</font> : Pour tester une liste de plusieurs valeurs.

- <font color="#188630">`(NOT) BETWEEN`</font> : Pour tester une valeur au sein d'un intervalle. 

- <font color="#188630">`(NOT) LIKE`</font> : Effectuer une recherche sur un mot.

- <font color="#188630">`IS NULL`</font> : Pour tester si une valeur est nulle.

- <font color="#188630">`IS NOT NULL`</font> : Pour tester si une valeur est non nulle.

# IN

## L'op√©rateur IN

L'op√©rateur <font color="#188630">`IN`</font> v√©rifie si les valeurs d'une colonne sont **√©gales √† une des valeurs dans une liste donn√©e**. 

L'op√©rateur <font color="#188630">`IN`</font> permet d'√©viter la r√©p√©tition de l'op√©rateur <font color="#188630">`OR`</font>

```{sql, eval=FALSE, echo=TRUE}
SELECT colonne
FROM tableau
WHERE colonne IN (valeur_1, valeur_2, .., valeur_x)
```

En deux requ√™tes, une avec des op√©rateurs <font color="#188630">`OR`</font> et l'autre avec l'op√©rateur <font color="#188630">`IN`</font> :

Extraire tous les joueurs √©voluant dans les √©quipes nationales de France, Belgique, Espagne et Russie. 

## L'op√©rateur IN

Avec l'op√©rateur <font color="#188630">`OR`</font>

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE team = 'France'
    OR team = 'Belgique' 
    OR team = 'Espagne' 
    OR team = 'Russie'"
)
```

Avec l'op√©rateur <font color="#188630">`IN`</font>

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players
  WHERE team IN ('France', 'Belgique', 'Espagne', 'Russie')"
)
```

On pr√©f√®re avec l'op√©rateur <font color="#188630">`IN`</font> ! üòâ

# BETWEEN

## L'op√©rateur BETWEEN

L'op√©rateur <font color="#188630">`BETWEEN`</font> permet de filtrer dans un **intervalle de donn√©es**. 

L'intervalle peut √™tre constitu√© de cha√Ænes de caract√®res, de nombres ou de dates. 

Le plus souvent, on l'utilise sur les deux derniers formats : les nombres et les dates. 

```{sql, eval=FALSE, echo=TRUE}
SELECT colonne
FROM tableau
WHERE colonne BETWEEN valeur_1 AND valeur_2
```

Pour tester si une valeur n'intervient pas dans un intervalle, il faut √©crire <font color="#188630">`NOT BETWEEN`</font>.

## L'op√©rateur BETWEEN

Extraire les joueurs n√©s entre le 01 janvier 1990 (_1990-01-01_) et le 31 d√©cembre 1994 (_1994-12-31_) 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

::: {.fragment .fade-in}
Extraction des joueurs n√©s entre le 01 janvier 1990 (_1990-01-01_) et le 31 d√©cembre 1994 (_1994-12-31_) 

```{r, eval=FALSE}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players
  WHERE birth_date BETWEEN '1990-01-01' AND '1994-12-31'"
)
```
:::

# LIKE

## L'op√©rateur LIKE

L'op√©rateur <font color="#188630">`LIKE`</font> permet de filtrer une colonne selon un _**pattern**_ donn√©. On l'utilise pour effectuer des recherches sur des mots, par exemple.

```{sql, eval=FALSE, echo=TRUE}
SELECT *
FROM tableau
WHERE colonne LIKE pattern
```

A l'inverse de l'op√©rateur de comparaison <font color="#188630">`=`</font>, l'op√©rateur <font color="#188630">`LIKE`</font> est plus maniable, notamment gr√¢ce √† ces deux jokers :

- <font color="#188630">`%`</font> : remplace tous les autres caract√®res.

- <font color="#188630">`_`</font> : remplace **un et uniquement un** caract√®re.

_Vite, vite, voyons quelques exemples !_

## L'op√©rateur LIKE

S√©lectionnons tous les joueurs dont les noms commencent par la lettre "a" :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE name LIKE 'a%'"
)
```

::: {.fragment .fade-in-then-semi-out}

S√©lectionnons tous les joueurs dont les noms terminent par la lettre "a" :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE name LIKE '%a'"
)
```
:::

::: {.fragment .fade-in-then-semi-out}

S√©lectionnons tous les joueurs dont les noms contiennent la lettre "a" et √©galement au moins un "c" :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db,
  "SELECT * 
  FROM players 
  WHERE name LIKE '%a%c%'"
)
```
:::

## L'op√©rateur LIKE

A vous ! 

S√©lectionner les joueurs qui contiennent les lettres "aa" dans leur pr√©nom ou leur nom

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

S√©lectionner les joueurs dont la 4√®me lettre est un "a"

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

S√©lectionner les milieux de terrain qui commencent par un "m"

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

## L'op√©rateur LIKE

::: {.fragment .fade-in-then-semi-out}
S√©lectionnons les joueurs qui contiennent les lettres "aa" dans leur pr√©nom ou leur nom

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE name LIKE '%aa%'"
)
```
:::

::: {.fragment .fade-in-then-semi-out}
S√©lectionnons les joueurs dont la 4√®me lettre est un "a"

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE name LIKE '___a%'
)
```
:::

::: {.fragment .fade-in-then-semi-out}
S√©lectionnons les milieux qui commencent par un "m"

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE position = 'Milieu' 
  AND name LIKE 'm%'"
)
```
:::

# IS (NOT) NULL 

## Les op√©rateurs IS NULL / IS NOT NULL

L'op√©rateur <font color="#188630">`IS`</font> permet de tester si une valeur est <font color="#188630">`NULL`</font> ou non, <font color="#188630">`NOT NULL`</font>. 

C'est la **seule fa√ßon** de g√©rer les valeurs manquantes. Les valeurs manquantes ne sont pas g√©r√©es par les autres op√©rateurs de comparaisons.

Mettons en pratiques ces deux op√©rateurs sur notre table !

S√©lectionner les joueurs dont la position sur le terrain est inconnue :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```


::: {.fragment .fade-in}

S√©lectionnons les joueurs dont la position sur le terrain est inconnue :

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT * 
  FROM players 
  WHERE position IS NULL"
)
```
:::

# ORDER BY

## ORDER BY

En SQL, il est possible de g√©rer dans notre requ√™te, **l'ordre de sortie des r√©sultats**. 

√Ä l'aide de l'instruction <font color="#188630">`ORDER BY`</font>, on peut trier les lignes d'une ou plusieurs colonnes par ordre croissant ou d√©croissant. 

_<small><font color="#848484">`√Ä noter, par d√©faut, l'ordre d'affichage est toujours croissant !`</font></small>_

```{sql, eval=FALSE, echo=TRUE}
SELECT *
FROM tableau
ORDER BY colonne DESC
```

Pour trier sur plusieurs colonnes, on les nomme dans l'instruction <font color="#188630">`ORDER BY`</font> et on les s√©pare par des <font color="#c7254e">`,`</font>

## ORDER BY

Afficher le nom et le nombre de s√©lections des joueurs, de celui qui a le plus de s√©lections √† celui qui en a le moins :  

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

Afficher le nom, le nombre de s√©lections et le num√©ro de maillot des joueurs, trier par ordre de s√©lections croissant et d√©croissant de maillot : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

Afficher le nom, le nombre de s√©lections des 3 milieux de terrain qui ont le plus de s√©lections : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "?"
)
```

## ORDER BY

::: {.fragment .fade-in}
Affichons le nom et le nombre de s√©lections des joueurs, de celui qui a le plus de s√©lections √† celui qui en a le moins : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT name, played 
  FROM players 
  ORDER BY played DESC"
)
```
:::

::: {.fragment .fade-in}
Affichons le nom, le nombre de s√©lections et le num√©ro de maillot des joueurs, trier par ordre de s√©lections croissant et d√©croissant de maillot : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT name, played, number 
  FROM players
  ORDER BY number DESC, played"
)
```
:::


::: {.fragment .fade-in}
Affichons le nom, le nombre de s√©lections des 3 milieux de terrain qui ont le plus de s√©lections : 

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT name, played 
  FROM players
  WHERE position = 'Milieu' 
  ORDER BY played DESC 
  LIMIT 3"
)
```
:::

# Exercice r√©capitulatif

## En SQL...

1/ Afficher les joueurs ayant un id entre 200 et 300 et dont le nom se termine par un "n".

2/ Afficher les joueurs √©voluant dans les √©quipes suivantes : Real Madrid, Barcelona et Arsenal et dont la position n'est pas renseign√©e.

3/ Afficher le capitaine qui poss√©dent le plus de s√©lections.

4/ Afficher les capitaines avec plus de 100 s√©lections ou les num√©ros 10 avec plus de 50 s√©lections.

## Correction

Affichons les joueurs ayant un id entre 200 et 300 et dont le nom se termine par un "n".

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT *
  FROM players 
  WHERE id BETWEEN 200 AND 300 
    AND name LIKE '%n'"
)
```

## Correction

Affichons les joueurs √©voluant dans les √©quipes suivantes : Real Madrid, Barcelona et Arsenal et dont la position n'est pas renseign√©e.

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT *
  FROM players
  WHERE club IN ('Real Madrid', 'Barcelona', 'Arsenal') 
    AND position IS NULL"
)
```

## Correction

Affichons le capitaine qui poss√©dent le plus de s√©lections.

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT *
  FROM players
  WHERE captain = 1
  ORDER BY played DESC
  LIMIT 1"
)
```

## Correction

Affichons les capitaines avec plus de 100 s√©lections ou les num√©ros 10 avec plus de 50 s√©lections.

```{r}
#| echo: true
#| eval: false
dbGetQuery(
  conn = db, 
  "SELECT *
  FROM players
  WHERE captain = 1 AND played > 100 
    OR number = 10 AND played > 50"
)
```

## Place aux agr√©gations !

La suite: [Agr√©ger des donn√©es](https://sql.breant.art/aggregate)